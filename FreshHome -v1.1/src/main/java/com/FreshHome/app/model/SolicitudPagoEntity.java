package com.FreshHome.app.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;

import jakarta.annotation.Generated;

import java.time.LocalDateTime;
import org.bson.codecs.pojo.annotations.BsonProperty;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;


import java.util.*;

/**
 * Generated by MongoDB Relational Migrator
 * https://www.mongodb.com/products/relational-migrator
 * Collection: solicitud
 * Language: Java
 * Template: Spring Data
 * Generated on 2025-05-10
 */
@JsonTypeName("solicitud_pago")
@Generated(value = "com.mongodb.migrator.application.codegen.config.java.JavaSpringCodegenConfig", date = "2025-05-10T12:40:10.597498100-05:00[America/Bogota]", comments = "Generator version: 7.10.0")@Document("solicitud_pago")
public class SolicitudPagoEntity {

  @BsonProperty("fechaPago")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private LocalDateTime fechaPago;

  @BsonProperty("idPago")
  private Integer idPago;

  @BsonProperty("idSolicitud")
  private Integer idSolicitud;

  @BsonProperty("tarifa")
  private Integer tarifa;

  @BsonProperty("metodo")
  private String metodo;

  public SolicitudPagoEntity fechaPago(LocalDateTime fechaPago) {
    this.fechaPago = fechaPago;
    return this;
  }

  /**
   * Get fechaPago
   * @return fechaPago
   */
  
  @JsonProperty("fechaPago")
  public LocalDateTime getFechaPago() {
    return fechaPago;
  }

  public void setFechaPago(LocalDateTime fechaPago) {
    this.fechaPago = fechaPago;
  }

  public SolicitudPagoEntity idPago(Integer idPago) {
    this.idPago = idPago;
    return this;
  }

  /**
   * Get idPago
   * @return idPago
   */
  
  @JsonProperty("idPago")
  public Integer getIdPago() {
    return idPago;
  }

  public void setIdPago(Integer idPago) {
    this.idPago = idPago;
  }

  public SolicitudPagoEntity idSolicitud(Integer idSolicitud) {
    this.idSolicitud = idSolicitud;
    return this;
  }

  /**
   * Get idSolicitud
   * @return idSolicitud
   */
  
  @JsonProperty("idSolicitud")
  public Integer getIdSolicitud() {
    return idSolicitud;
  }

  public void setIdSolicitud(Integer idSolicitud) {
    this.idSolicitud = idSolicitud;
  }

  public SolicitudPagoEntity tarifa(Integer tarifa) {
    this.tarifa = tarifa;
    return this;
  }

  /**
   * Get tarifa
   * @return tarifa
   */
  
  @JsonProperty("tarifa")
  public Integer getTarifa() {
    return tarifa;
  }

  public void setTarifa(Integer tarifa) {
    this.tarifa = tarifa;
  }

  public SolicitudPagoEntity metodo(String metodo) {
    this.metodo = metodo;
    return this;
  }

  /**
   * Get metodo
   * @return metodo
   */
  
  @JsonProperty("metodo")
  public String getMetodo() {
    return metodo;
  }

  public void setMetodo(String metodo) {
    this.metodo = metodo;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SolicitudPagoEntity solicitudPago = (SolicitudPagoEntity) o;
    return Objects.equals(this.fechaPago, solicitudPago.fechaPago) &&
        Objects.equals(this.idPago, solicitudPago.idPago) &&
        Objects.equals(this.idSolicitud, solicitudPago.idSolicitud) &&
        Objects.equals(this.tarifa, solicitudPago.tarifa) &&
        Objects.equals(this.metodo, solicitudPago.metodo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fechaPago, idPago, idSolicitud, tarifa, metodo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SolicitudPagoEntity {\n");
    sb.append("    fechaPago: ").append(toIndentedString(fechaPago)).append("\n");
    sb.append("    idPago: ").append(toIndentedString(idPago)).append("\n");
    sb.append("    idSolicitud: ").append(toIndentedString(idSolicitud)).append("\n");
    sb.append("    tarifa: ").append(toIndentedString(tarifa)).append("\n");
    sb.append("    metodo: ").append(toIndentedString(metodo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

