package com.FreshHome.app.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;

import jakarta.annotation.Generated;

import java.time.LocalDateTime;
import org.bson.codecs.pojo.annotations.BsonProperty;
import org.bson.types.ObjectId;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;


import java.util.*;

/**
 * Generated by MongoDB Relational Migrator
 * https://www.mongodb.com/products/relational-migrator
 * Collection: usuario
 * Language: Java
 * Template: Spring Data
 * Generated on 2025-04-27
 */
@JsonTypeName("usuario")
@Generated(value = "com.mongodb.migrator.application.codegen.config.java.JavaSpringCodegenConfig", date = "2025-04-27T21:31:01.586510200-05:00[America/Bogota]", comments = "Generator version: 7.10.0")@Document("usuario")
public class UsuarioEntity {

  @BsonProperty("_id")
  private ObjectId id = null;

  @BsonProperty("edad")
  private Integer edad;

  @BsonProperty("fechaNacimiento")
  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
  private LocalDateTime fechaNacimiento;

  @BsonProperty("idUsuario")
  private Integer idUsuario;

  @BsonProperty("correo")
  private String correo;

  @BsonProperty("nombre")
  private String nombre;

  @BsonProperty("contraseña")
  private String contraseña;

  @BsonProperty("direccion")
  private String direccion;

  @BsonProperty("user_id_sql")
  private Long userIdSql;

  public UsuarioEntity id(ObjectId id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  
  @JsonProperty("_id")
  public ObjectId getId() {
    return id;
  }

  public void setId(ObjectId id) {
    this.id = id;
  }

  public UsuarioEntity edad(Integer edad) {
    this.edad = edad;
    return this;
  }

  /**
   * Get edad
   * @return edad
   */
  
  @JsonProperty("edad")
  public Integer getEdad() {
    return edad;
  }

  public void setEdad(Integer edad) {
    this.edad = edad;
  }

  public UsuarioEntity fechaNacimiento(LocalDateTime fechaNacimiento) {
    this.fechaNacimiento = fechaNacimiento;
    return this;
  }

  /**
   * Get fechaNacimiento
   * @return fechaNacimiento
   */
  
  @JsonProperty("fechaNacimiento")
  public LocalDateTime getFechaNacimiento() {
    return fechaNacimiento;
  }

  public void setFechaNacimiento(LocalDateTime fechaNacimiento) {
    this.fechaNacimiento = fechaNacimiento;
  }

  public UsuarioEntity idUsuario(Integer idUsuario) {
    this.idUsuario = idUsuario;
    return this;
  }

  /**
   * Get idUsuario
   * @return idUsuario
   */
  
  @JsonProperty("idUsuario")
  public Integer getIdUsuario() {
    return idUsuario;
  }

  public void setIdUsuario(Integer idUsuario) {
    this.idUsuario = idUsuario;
  }

  public UsuarioEntity correo(String correo) {
    this.correo = correo;
    return this;
  }

  /**
   * Get correo
   * @return correo
   */
  
  @JsonProperty("correo")
  public String getCorreo() {
    return correo;
  }

  public void setCorreo(String correo) {
    this.correo = correo;
  }

  public UsuarioEntity nombre(String nombre) {
    this.nombre = nombre;
    return this;
  }

  /**
   * Get nombre
   * @return nombre
   */
  
  @JsonProperty("nombre")
  public String getNombre() {
    return nombre;
  }

  public void setNombre(String nombre) {
    this.nombre = nombre;
  }

  public UsuarioEntity contraseña(String contraseña) {
    this.contraseña = contraseña;
    return this;
  }

  /**
   * Get contraseña
   * @return contraseña
   */
  
  @JsonProperty("contraseña")
  public String getContraseña() {
    return contraseña;
  }

  public void setContraseña(String contraseña) {
    this.contraseña = contraseña;
  }

  public UsuarioEntity direccion(String direccion) {
    this.direccion = direccion;
    return this;
  }

  /**
   * Get direccion
   * @return direccion
   */
  
  @JsonProperty("direccion")
  public String getDireccion() {
    return direccion;
  }

  public void setDireccion(String direccion) {
    this.direccion = direccion;
  }

  public UsuarioEntity userIdSql(Long userIdSql) {
    this.userIdSql = userIdSql;
    return this;
  }

  /**
   * Get userIdSql
   * @return userIdSql
   */
  
  @JsonProperty("user_id_sql")
  public Long getUserIdSql() {
    return userIdSql;
  }

  public void setUserIdSql(Long userIdSql) {
    this.userIdSql = userIdSql;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsuarioEntity usuario = (UsuarioEntity) o;
    return Objects.equals(this.id, usuario.id) &&
        Objects.equals(this.edad, usuario.edad) &&
        Objects.equals(this.fechaNacimiento, usuario.fechaNacimiento) &&
        Objects.equals(this.idUsuario, usuario.idUsuario) &&
        Objects.equals(this.correo, usuario.correo) &&
        Objects.equals(this.nombre, usuario.nombre) &&
        Objects.equals(this.contraseña, usuario.contraseña) &&
        Objects.equals(this.direccion, usuario.direccion) &&
        Objects.equals(this.userIdSql, usuario.userIdSql);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, edad, fechaNacimiento, idUsuario, correo, nombre, contraseña, direccion, userIdSql);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsuarioEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    edad: ").append(toIndentedString(edad)).append("\n");
    sb.append("    fechaNacimiento: ").append(toIndentedString(fechaNacimiento)).append("\n");
    sb.append("    idUsuario: ").append(toIndentedString(idUsuario)).append("\n");
    sb.append("    correo: ").append(toIndentedString(correo)).append("\n");
    sb.append("    nombre: ").append(toIndentedString(nombre)).append("\n");
    sb.append("    contraseña: ").append(toIndentedString(contraseña)).append("\n");
    sb.append("    direccion: ").append(toIndentedString(direccion)).append("\n");
    sb.append("    userIdSql: ").append(toIndentedString(userIdSql)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
